CREATE VIEW [reporting].[ALL_CUSTOMER_CREW_EXP_VW] AS 


/* CREW A VIEW THAT SHOWS DAILY CREW EXPERIENCE FOR PAST 13 MONTHS FOR ALL KEY ENERGY RIG CUSTOMERS*/
WITH ACTIVITIES AS (
    /* USE THE ACTIVITIES TABLE TO GET THE RIG, JOBNUMBER, CUSTOMER AND JOB START/ END TIMES */
    SELECT DISTINCT 
        RIG,
        JOBNUMBER,
        CUSTOMER,
        WORKINGDEPTH,
        WORKTYPE,
        JOBTYPE,
        JOBSTARTTIME,
        JOBENDTIME
    FROM REPORTING.ALL_RIG_JOB_ACTIVITIES_VW
    --WHERE CUSTOMER LIKE '%AERA%'
)

/* NOTE: CREATE CODE TO COMPUTE THE TOTAL NUMBER OF DAYS AN EMPLOYEE WORKED FOR KEY  */

,  EMP_DATES AS (
    /* ESTABLISH ORIGINAL HIRE DATE */
    SELECT DISTINCT 
        EMPLOYEEID AS EIN, 
        'HIR' AS HR_ACTION,
        ORGINALDATEOFHIRE AS ACTION_DATE
    FROM  DBO.ADP_TRANSACTIONS
    UNION 
    /* ESTABLISH TERMINATION AND REHIRE DATES */
    SELECT 
        EMPLOYEEID AS EIN,
        ACTION AS HR_ACTION,
        EFFECTIVEDATE AS ACTION_DATE
    FROM DBO.ADP_TRANSACTIONS
    WHERE ACTION IN ('TER','REH')
)

, EMP_PERIODS AS (
    /* CALCULATE THE NUMBER OF DAYS BETWEEN HIRE AND TERMINATION DATES (OR CURRENT DATE IF NO TERMINATION DATE) */
    SELECT 
        EIN,
        CASE 
            WHEN HR_ACTION IN ('HIR','REH') AND LEAD(ACTION_DATE) OVER(PARTITION BY EIN ORDER BY ACTION_DATE) IS NOT NULL THEN DATEDIFF(D, ACTION_DATE, LEAD(ACTION_DATE) OVER (PARTITION BY EIN ORDER BY ACTION_DATE))
            WHEN HR_ACTION IN ('HIR','REH') AND LEAD(ACTION_DATE) OVER(PARTITION BY EIN ORDER BY ACTION_DATE) IS NULL THEN DATEDIFF(D, ACTION_DATE, GETDATE())
            ELSE 0 END AS DAYS_EMPLOYED
    FROM EMP_DATES
)

,  EMP_DAYS AS (
    /* SUM UP THE TOTAL NUMBER OF DAYS EMPLOYEE WORKED FOR KEY ENERGY SERVICES */
    SELECT 
        EIN,
        SUM(DAYS_EMPLOYED) AS KEY_DAYS_EMPLOYED 
    FROM EMP_PERIODS
    GROUP BY EIN 
)
/* END OF EMPLOYMENT CALCULATION CODE */

, RIG_WORKER_INFORMATION AS (
    /* CALCULATE CREW STATISTICS PER RIG AND WORK DAY*/
    SELECT 
        L.ASSET_NUMBER AS RIG,
        CONVERT(DATE,L.WORK_DATE) AS WORK_DATE,
        L.EMPLOYEE_ID AS EIN,
        E.KEY_DAYS_EMPLOYED,
        SUM(L.DURATION) AS DURATION
    FROM DBO.LABORINCREMENTAL2 L 
    LEFT JOIN EMP_DAYS E ON (L.EMPLOYEE_ID = E.EIN)
    WHERE L.ASSET_NUMBER IS NOT NULL 
    GROUP BY L.ASSET_NUMBER, L.WORK_DATE, L.EMPLOYEE_ID, E.KEY_DAYS_EMPLOYED
    
)

, RIGS AS (
    SELECT 
        ASSET_NUM AS RIG,
        MKTP_CODE,
        MKTP_NAME,
        LOCO_CODE,
        LOCO_NAME,
        YARD_CODE,
        YARD_NAME
    FROM DBO.MDM_ASSETS 
    WHERE ASSET_CLASS = 'RIG'
)
, __INIT__ AS (
    /* COMPOSE FINAL DATASET */
    /* NOTE: EXCEPTION_DURATIONMINUTES COMES FROM THE KEYVIEW ACTIVITIES2 TABLE AND NOT THE ACTUAL EXCEPTIONS TABLE */
    SELECT 
        A.RIG,
        A.JOBNUMBER,
        A.CUSTOMER,
        A.WORKINGDEPTH,
        A.WORKTYPE,
        A.JOBTYPE,
        A.JOBSTARTTIME,
        A.JOBENDTIME,
        C.WORK_DATE,
        COUNT(C.EIN) AS DAILY_CREW_SIZE,
        SUM(DURATION)/ COUNT(C.EIN)  AS CREW_AVG_DURATION_DAILY, 
        SUM(C.KEY_DAYS_EMPLOYED) / COUNT(C.EIN) AS CREW_AVG_KEY_DAYS_EMPLOYED,
        (SUM(C.KEY_DAYS_EMPLOYED) / COUNT(C.EIN)) / 365.25 AS CREW_AVG_KEY_YRS_EMPLOYED
        --C.DURATION
    FROM ACTIVITIES A 
    LEFT JOIN RIG_WORKER_INFORMATION C ON (A.RIG = C.RIG AND (A.JOBSTARTTIME <= C.WORK_DATE AND A.JOBENDTIME >= C.WORK_DATE))
    WHERE WORK_DATE IS NOT NULL 
    GROUP BY  A.RIG, A.JOBNUMBER, A.CUSTOMER, A.WORKINGDEPTH, A.WORKTYPE, A.JOBTYPE, A.JOBSTARTTIME, A.JOBENDTIME, C.WORK_DATE--, C.EIN, C.KEY_DAYS_EMPLOYED
)

, __DATASET__ AS (
    SELECT 
        I.*,
        R.LOCO_CODE,
        R.LOCO_NAME,
        R.MKTP_CODE,
        R.MKTP_NAME,
        R.YARD_CODE,
        R.YARD_NAME
    FROM __INIT__ I 
    LEFT JOIN RIGS R ON (I.RIG = R.RIG)
    )
SELECT * FROM __DATASET__;
GO

